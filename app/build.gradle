plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
    id 'kotlin-kapt'
    id 'kotlin-allopen'
    id 'jacoco'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
    id 'com.google.gms.google-services'
}

android {
    namespace 'com.goforer.advancedapparchitecture'
    compileSdk 33
    buildToolsVersion "30.0.3"

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    defaultConfig {
        applicationId "com.goforer.advancedapparchitecture"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        ndk.abiFilters 'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'arm64-v8a'
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation "androidx.core:core-ktx:$androidx_core_ktx_version"
    implementation 'com.google.android.material:material:1.7.0'

    implementation "androidx.multidex:multidex:$androidx_multidex_version"

    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation "androidx.fragment:fragment-ktx:$arch_fragment_version"
    implementation "androidx.activity:activity-ktx:$arch_activity_version"
    implementation "androidx.recyclerview:recyclerview:$androidx_recyclerview_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$arch_lifecycle_extension_version"
    // Lifecycles only (no ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$arch_lifecycle_runtime_ktx"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$arch_lifecycle_ktx"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$arch_lifecycle_viewmodel_savedstate"
    implementation "androidx.lifecycle:lifecycle-common-java8:$arch_lifecycle_version"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"

    implementation 'androidx.work:work-runtime-ktx:2.7.1'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_version"

    implementation "androidx.paging:paging-runtime-ktx:$arch_paging_version"
    implementation "androidx.lifecycle:lifecycle-runtime-testing:$arch_lifecycle_version"
    implementation "androidx.security:security-crypto-ktx:1.1.0-alpha04"
    // For Identity Credential APIs
    implementation "androidx.security:security-identity-credential:1.0.0-alpha03"
    // For App Authentication APIs
    implementation "androidx.security:security-app-authenticator:1.0.0-alpha02"

    implementation 'androidx.browser:browser:1.4.0'
    testImplementation "androidx.paging:paging-common-ktx:$arch_paging_version"

    implementation 'com.google.code.gson:gson:2.9.1'

    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    // define a BOM and its version
    implementation(platform('com.squareup.okhttp3:okhttp-bom:5.0.0-alpha.10'))

    // define any required OkHttp artifacts without version
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

    implementation 'com.squareup.okio:okio:3.2.0'

    // Glide(Image library)
    implementation 'com.github.bumptech.glide:glide:4.14.2'
    implementation 'com.github.bumptech.glide:annotations:4.14.2'
    kapt 'com.github.bumptech.glide:compiler:4.14.2'

    implementation('io.coil-kt:coil:2.2.2')

    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    // Debuging Network & Resources
    implementation 'com.facebook.stetho:stetho:1.6.0'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.6.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-datetime:0.4.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.navigation:navigation-fragment-ktx:$arch_nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$arch_nav_version"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$arch_nav_version"

    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kaptTest "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    implementation "com.jakewharton.timber:timber:$timber_version"

    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    implementation 'com.google.android.play:core:1.10.3'
    implementation 'com.google.android.play:core-ktx:1.8.1'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.gms:play-services-cloud-messaging:17.0.2'
    implementation 'com.google.android.gms:play-services-tasks:18.0.2'

    // Google Admob
    implementation 'com.google.android.gms:play-services-ads:21.3.0'
    implementation 'com.google.android.gms:play-services-ads-lite:21.3.0'

    implementation platform('com.google.firebase:firebase-bom:30.5.0')
    implementation 'com.google.firebase:firebase-messaging-ktx'
    // Declare the dependencies for the Firebase Cloud Messaging and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-dynamic-links-ktx'
    implementation 'com.google.firebase:firebase-perf-ktx'
    implementation 'com.google.firebase:firebase-config-ktx'
    implementation 'com.google.firebase:firebase-invites:17.0.0'
    implementation 'com.google.firebase:firebase-messaging-directboot'
    // Firebase Crashlytics SDK.
    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    // Json Logging
    implementation 'com.orhanobut:logger:2.2.0'

    implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'
}

jacoco {
    toolVersion = "0.8.5"
}

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def excludes = [
                        '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                        '**/*Test*.*', 'android/**/*.*',
                        '**/*_MembersInjector.class',
                        '**/Dagger*Component.class',
                        '**/Dagger*Component$Builder.class',
                        '**/*_*Factory.class',
                        '**/*ComponentImpl.class',
                        '**/*SubComponentBuilder.class',
                        '**/AppFireBaseMessagingService.class',
                        '**/caller/*',
                        '**/di/*',
                        '**/view/*',
                        '**/ui/*'
                ]

                classDirectories.from = fileTree(
                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: excludes
                ) + fileTree(
                        dir: "${project.buildDir}/tmp/kotlin-classes/${sourceName}",
                        excludes: excludes
                )

                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java"
                ]
                additionalSourceDirs.from = files(coverageSourceDirs)
                sourceDirectories.from = files(coverageSourceDirs)
                executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}